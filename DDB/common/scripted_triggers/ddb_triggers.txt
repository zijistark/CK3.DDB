
can_convert_locally_considering_ghw_DDB = {
	# If the scoped character is unlanded, then use their liege as our reference:
	trigger_if = {
		limit = {
			is_ruler = yes
			is_ai = yes
		}
		save_temporary_scope_as = ruler
	}
	trigger_else_if = {
		limit = {
			exists = liege
			is_ai = yes
		}
		liege = { save_temporary_scope_as = ruler }
	}
	trigger_else = {
		always = yes
	}
	# If they are a ruler or had a liege, let's get on with this:
	trigger_if = {
		limit = {
			exists = scope:ruler
			has_global_variable_list = ghw_won_kingdoms_DDB
		}
		NOT = {
			any_in_global_list = {
				variable = ghw_won_kingdoms_DDB # List of target kingdoms won via GHWs
				trigger_if = {
					limit = {
						has_variable = ghw_dynamic_title_DDB
					}
					exists = var:ghw_dynamic_title_DDB
					var:ghw_dynamic_title_DDB = {
						save_temporary_scope_as = defacto_kingdom
					}
				}
				trigger_else = {
					save_temporary_scope_as = defacto_kingdom
				}
				exists = scope:defacto_kingdom.holder # The de facto kingdom must have a holder
				# Holder's faith must be the same as the GHW victors':
				scope:defacto_kingdom.holder.faith = var:ghw_winner_faith_DDB
				save_temporary_scope_as = dejure_kingdom
				scope:ruler = {
					faith = scope:defacto_kingdom.holder.faith # Ruler must have same faith too
					# Ruler must be a de facto vassal or below of the GHW kingdom's holder or the holder
					# themselves:
					OR = {
						this = scope:defacto_kingdom.holder
						target_is_liege_or_above = scope:defacto_kingdom.holder
					}
					# Ensure their capital is inside the de jure GHW kingdom or a neighboring de jure kingdom:
					capital_barony = {
						OR = {
							kingdom = scope:dejure_kingdom # Capital is directly in the GHW kingdom
							any_title_to_title_neighboring_kingdom = {
								this = scope:dejure_kingdom # Capital's in a de jure neighbor kingdom
							}
						}
					}
				}
			}
		}
	}
}


# expects scope to the title in TITLE, assumes TITLE is held
can_press_claim_on_title_considering_gender_DDB = {
	has_claim_on = $TITLE$
	trigger_if = {
		limit = {
			$TITLE$ = { has_title_law = male_only_law }
		}
		is_male = yes
	}
	trigger_else_if = {
		limit = {
			$TITLE$ = { has_title_law = male_preference_law }
		}
		OR = {
			is_male = yes
			any_claim = {
				explicit = yes
				this = $TITLE$
			}
		}
	}
	trigger_else_if = {
		limit = {
			$TITLE$ = { has_title_law = equal_law }
		}
		always = yes
	}
	trigger_else_if = {
		limit = {
			$TITLE$ = { has_title_law = female_preference_law }
		}
		OR = {
			is_female = yes
			any_claim = {
				explicit = yes
				this = $TITLE$
			}
		}
	}
	trigger_else_if = {
		limit = {
			$TITLE$ = { has_title_law = female_only_law }
		}
		is_female = yes
	}
	# Exhausted title gender law checks, fallback to same logic for realm gender laws
	trigger_else_if = {
		limit = {
			$TITLE$.holder = { has_realm_law = male_only_law }
		}
		is_male = yes
	}
	trigger_else_if = {
		limit = {
			$TITLE$.holder = { has_realm_law = male_preference_law }
		}
		OR = {
			is_male = yes
			any_claim = {
				explicit = yes
				this = $TITLE$
			}
		}
	}
	trigger_else_if = {
		limit = {
			$TITLE$.holder = { has_realm_law = female_preference_law }
		}
		OR = {
			is_female = yes
			any_claim = {
				explicit = yes
				this = $TITLE$
			}
		}
	}
	trigger_else_if = {
		limit = {
			$TITLE$.holder = { has_realm_law = female_only_law }
		}
		is_female = yes
	}
	trigger_else = {
		always = yes
	}
}
